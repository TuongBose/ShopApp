services:
  mysql-container:
    container_name: mysql-container
    image: mysql:8.2.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: shopapp
    ports:
      - 3306:3306
    networks:
      - shopapp-network

  phpmyadmin-container:
    container_name: phpmyadmin-container
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    depends_on:
      - mysql-container
    ports:
      - "8100:80"
    environment:
      PMA_HOST: mysql-container #phpMyAdmin Host, PMA = PHP My Admin
      PMA_PORT: 3306
      # auto login
      # PMA_USER: root
      # PMA_PASSWORD: root
      UPLOAD_LIMIT: 500M
    networks:
      - shopapp-network

  redis-container:
    container_name: redis-container
    image: docker.io/redis:7.2.3
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    networks:
      - shopapp-network

#  shopapp-spring-container:
#    container_name: shopapp-spring-container
#    build:
#      context: .
#      dockerfile: DockerfileJavaSpring
#    ports:
#      - 8099:8080
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container:3306/shopapp
#      MYSQL_ROOT_PASSWORD: root
#      REDIS_HOST: redis-container
#      REDIS_PORT: 6379
#      KAFKA_BROKER_SERVER: kafka-broker-01
#      KAFKA_BROKER_PORT: 19092
#    depends_on:
#      - mysql-container
#    networks:
#      - shopapp-network
#    helthcheck:
#      test: ["CMD-SHELL", "curl --fail http://localhost:8080/api/v1/actuator/health || exit 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 20s # 20s after container created, health check

  shopapp-angular-container:
    container_name: shopapp-angular-container
    build:
      context: .
      dockerfile: DockerfileAngular
    ports:
     - "4200:80"
    restart: always
    networks:
     - shopapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      
networks:
  shopapp-network:
    driver: bridge

volumes:
  mysql_data: